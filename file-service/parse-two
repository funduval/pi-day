async function csvToJson(csvFilePath) {
  const readStream = fs.createReadStream(csvFilePath);
  const rl = readline.createInterface({
    input: readStream,
    crlfDelay: Infinity
  });

  let headers = [];
  const jsonData = [];

  for await (const line of rl) {
    if (!headers.length) {
      headers = line.split(',');
      continue;
    }

    const data = {};
    const row = line.split(',');

    for (let i = 0; i < headers.length; i++) {
      data[headers[i]] = row[i];
    }

    jsonData.push(data);
  }

  return JSON.stringify(jsonData);
}

(async () => {
  const jsonData = await csvToJson('data.csv');
  console.log(jsonData);
})();
This code uses the fs module to create a read stream from the CSV file and readline module to read each line. It then splits the first line to get the headers, and the rest of the lines are split into their corresponding fields and values.

Finally, it returns a JSON string of the data and logs it to the console. The async/await syntax is used to make the function asynchronous and handle the promise that csvToJson returns.





Regenerate response
